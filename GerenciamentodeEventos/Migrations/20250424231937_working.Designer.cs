// <auto-generated />
using System;
using GerenciamentodeEventos.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GerenciamentodeEventos.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250424231937_working")]
    partial class working
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GerenciamentodeEventos.Model.Categoria", b =>
                {
                    b.Property<int>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idcategoria");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCategoria"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("descricao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.HasKey("IdCategoria");

                    b.ToTable("categoria");
                });

            modelBuilder.Entity("GerenciamentodeEventos.Model.Evento", b =>
                {
                    b.Property<int>("IdEvento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idevento");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdEvento"));

                    b.Property<int>("Capacidade")
                        .HasColumnType("integer")
                        .HasColumnName("capacidade");

                    b.Property<DateTime>("DataHora")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datahora");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("descricao");

                    b.Property<int>("IdCategoria")
                        .HasColumnType("integer")
                        .HasColumnName("idcategoria");

                    b.Property<int>("IdLocal")
                        .HasColumnType("integer")
                        .HasColumnName("idlocal");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<int>("SituacaoInscricao")
                        .HasColumnType("integer")
                        .HasColumnName("situacaoinscricao");

                    b.Property<float>("Valor")
                        .HasColumnType("real")
                        .HasColumnName("valor");

                    b.HasKey("IdEvento");

                    b.HasIndex("IdCategoria");

                    b.HasIndex("IdLocal");

                    b.ToTable("evento");
                });

            modelBuilder.Entity("GerenciamentodeEventos.Model.Feedback", b =>
                {
                    b.Property<int>("IdFeedback")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idfeedback");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdFeedback"));

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("comentario");

                    b.Property<DateTime>("DataFeedback")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datafeedback");

                    b.Property<int>("IdEvento")
                        .HasColumnType("integer")
                        .HasColumnName("idevento");

                    b.Property<int>("IdPessoa")
                        .HasColumnType("integer")
                        .HasColumnName("idpessoa");

                    b.Property<int>("Nota")
                        .HasColumnType("integer")
                        .HasColumnName("nota");

                    b.HasKey("IdFeedback");

                    b.HasIndex("IdEvento");

                    b.HasIndex("IdPessoa");

                    b.ToTable("feedback");
                });

            modelBuilder.Entity("GerenciamentodeEventos.Model.Inscricao", b =>
                {
                    b.Property<int>("IdInscricao")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idinscricao");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdInscricao"));

                    b.Property<DateTime>("DataInscricao")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datainscricao");

                    b.Property<int>("IdEvento")
                        .HasColumnType("integer")
                        .HasColumnName("idevento");

                    b.Property<int>("IdPessoa")
                        .HasColumnType("integer")
                        .HasColumnName("idpessoa");

                    b.Property<int>("Sequencial")
                        .HasColumnType("integer")
                        .HasColumnName("numeroinscricao");

                    b.HasKey("IdInscricao");

                    b.HasIndex("IdEvento");

                    b.HasIndex("IdPessoa");

                    b.ToTable("inscricao");
                });

            modelBuilder.Entity("GerenciamentodeEventos.Model.Local", b =>
                {
                    b.Property<int>("IdLocal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idlocal");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdLocal"));

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("bairro");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("cidade");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)")
                        .HasColumnName("estado");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("logradouro");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("numero");

                    b.HasKey("IdLocal");

                    b.ToTable("local");
                });

            modelBuilder.Entity("GerenciamentodeEventos.Model.Organizador", b =>
                {
                    b.Property<int>("IdOrganizador")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idorganizador");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdOrganizador"));

                    b.Property<string>("Biografia")
                        .HasColumnType("text")
                        .HasColumnName("biografia");

                    b.Property<int>("IdEvento")
                        .HasColumnType("integer")
                        .HasColumnName("idevento");

                    b.Property<int>("IdPessoa")
                        .HasColumnType("integer")
                        .HasColumnName("idpessoa");

                    b.HasKey("IdOrganizador");

                    b.HasIndex("IdEvento");

                    b.HasIndex("IdPessoa");

                    b.ToTable("organizador");
                });

            modelBuilder.Entity("GerenciamentodeEventos.Model.Pessoa", b =>
                {
                    b.Property<int>("IdPessoa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("idpessoa");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPessoa"));

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("character varying(11)")
                        .HasColumnName("cpf");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("nome");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("telefone");

                    b.HasKey("IdPessoa");

                    b.ToTable("pessoa");
                });

            modelBuilder.Entity("GerenciamentodeEventos.Model.Evento", b =>
                {
                    b.HasOne("GerenciamentodeEventos.Model.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GerenciamentodeEventos.Model.Local", "Local")
                        .WithMany()
                        .HasForeignKey("IdLocal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");

                    b.Navigation("Local");
                });

            modelBuilder.Entity("GerenciamentodeEventos.Model.Feedback", b =>
                {
                    b.HasOne("GerenciamentodeEventos.Model.Evento", "Evento")
                        .WithMany()
                        .HasForeignKey("IdEvento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GerenciamentodeEventos.Model.Pessoa", "Pessoa")
                        .WithMany()
                        .HasForeignKey("IdPessoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("GerenciamentodeEventos.Model.Inscricao", b =>
                {
                    b.HasOne("GerenciamentodeEventos.Model.Evento", "Evento")
                        .WithMany()
                        .HasForeignKey("IdEvento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GerenciamentodeEventos.Model.Pessoa", "Pessoa")
                        .WithMany()
                        .HasForeignKey("IdPessoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("GerenciamentodeEventos.Model.Organizador", b =>
                {
                    b.HasOne("GerenciamentodeEventos.Model.Evento", "Evento")
                        .WithMany()
                        .HasForeignKey("IdEvento")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GerenciamentodeEventos.Model.Pessoa", "Pessoa")
                        .WithMany()
                        .HasForeignKey("IdPessoa")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Evento");

                    b.Navigation("Pessoa");
                });
#pragma warning restore 612, 618
        }
    }
}
